<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>netcoreapp3.0</TargetFramework>
    <TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>
    <TypeScriptToolsVersion>Latest</TypeScriptToolsVersion>
    <IsPackable>false</IsPackable>
    <SpaRoot>ClientApp\</SpaRoot>
    <DefaultItemExcludes>$(DefaultItemExcludes);$(SpaRoot)node_modules\**</DefaultItemExcludes>

    <!-- Set this to true if you enable server-side prerendering -->
    <BuildServerSideRenderer>false</BuildServerSideRenderer>
    <ApplicationIcon>favicon.ico</ApplicationIcon>
    <Configurations>Debug;Release;DEVTEST;Staging</Configurations>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="AutoMapper" Version="9.0.0" />
    <PackageReference Include="AutoMapper.Extensions.Microsoft.DependencyInjection" Version="7.0.0" />
    <PackageReference Include="FluentValidation.AspNetCore" Version="8.5.0" />
    <PackageReference Include="MediatR" Version="7.0.0" />
    <PackageReference Include="MediatR.Extensions.Microsoft.DependencyInjection" Version="7.0.0" />
    <PackageReference Include="Microsoft.AspNetCore.Mvc.NewtonsoftJson" Version="3.0.0" />
    <PackageReference Include="Microsoft.AspNetCore.SpaServices.Extensions" Version="3.0.0" />
    <PackageReference Include="Microsoft.AspNetCore.ApiAuthorization.IdentityServer" Version="3.0.0" />
    <PackageReference Include="Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore" Version="3.0.0" />
    <PackageReference Include="Microsoft.AspNetCore.Identity.EntityFrameworkCore" Version="3.0.0" />
    <PackageReference Include="Microsoft.AspNetCore.Identity.UI" Version="3.0.0" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Relational" Version="3.0.0" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="3.0.0" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="3.0.0" />
    <PackageReference Include="Microsoft.Extensions.Logging.Debug" Version="3.0.0" />
    <PackageReference Include="Microsoft.VisualStudio.Web.CodeGeneration.Contracts" Version="3.0.0" />
    <PackageReference Include="Microsoft.VisualStudio.Web.CodeGeneration.Design" Version="3.0.0" />
    <PackageReference Include="Newtonsoft.Json" Version="12.0.2" />
    <PackageReference Include="NLog.Web.AspNetCore" Version="4.8.6" />
    <PackageReference Include="Swashbuckle.AspNetCore.Swagger" Version="4.0.1" />
    <PackageReference Include="Swashbuckle.AspNetCore.SwaggerGen" Version="4.0.1" />
    <PackageReference Include="Swashbuckle.AspNetCore.SwaggerUi" Version="4.0.1" />
  </ItemGroup>

  <ItemGroup>
    <!-- Don't publish the SPA source files, but do show them in the project files list -->
    <Content Remove="$(SpaRoot)**" />
    <None Remove="$(SpaRoot)**" />
    <None Include="$(SpaRoot)**" Exclude="$(SpaRoot)node_modules\**" />
  </ItemGroup>

  <ItemGroup>
    <None Remove="ClientApp\src\app\common\errors\app-error-handler.ts" />
    <None Remove="ClientApp\src\app\common\errors\app-error-state-matcher.ts" />
    <None Remove="ClientApp\src\app\common\errors\app-error.ts" />
    <None Remove="ClientApp\src\app\common\errors\bad-input-error.ts" />
    <None Remove="ClientApp\src\app\common\errors\not-found-error.ts" />
    <None Remove="ClientApp\src\app\directives\element-select.directive.ts" />
    <None Remove="ClientApp\src\app\models\token.response.ts" />
    <None Remove="ClientApp\src\app\models\user.ts" />
    <None Remove="ClientApp\src\app\modules\pipes-module\text-pipes\safe-html-pipe.ts" />
    <None Remove="ClientApp\src\app\modules\script-interpreter\models\api\scripts\create-script-command.ts" />
    <None Remove="ClientApp\src\app\modules\script-interpreter\models\assertionImpl.ts" />
    <None Remove="ClientApp\src\app\modules\script-interpreter\models\enums\language.ts" />
    <None Remove="ClientApp\src\app\modules\script-interpreter\models\testDataImpl.ts" />
    <None Remove="ClientApp\src\app\modules\script-interpreter\models\testParameterImpl.ts" />
    <None Remove="ClientApp\src\app\modules\script-interpreter\services\test-data.service.ts" />
    <None Remove="ClientApp\src\app\modules\script-interpreter\services\translations\group-translation.service.ts" />
    <None Remove="ClientApp\src\app\modules\script-interpreter\services\translations\parameter-translation.service.ts" />
    <None Remove="ClientApp\src\app\modules\script-interpreter\services\translations\script-translation.service.ts" />
    <None Remove="ClientApp\src\app\modules\script-interpreter\services\translations\value-option-translation.service.ts" />
    <None Remove="ClientApp\src\app\services\auth.interceptor.ts" />
    <None Remove="ClientApp\src\app\services\auth.response.interceptor.ts" />
    <None Remove="ClientApp\src\app\services\auth.service.ts" />
    <None Remove="ClientApp\src\app\services\configuration.service.ts" />
    <None Remove="ClientApp\src\app\services\db-keys.ts" />
    <None Remove="ClientApp\src\app\services\local-store-manager.service.ts" />
    <None Remove="ClientApp\src\app\services\search.service.ts" />
    <None Remove="ClientApp\src\app\services\translation.service.ts" />
    <None Remove="ClientApp\src\app\services\utilities.ts" />
    <None Remove="ClientApp\src\assets\images\custom-views\snow-zones.jpg" />
    <None Remove="ClientApp\src\assets\locale\de.json" />
    <None Remove="ClientApp\src\assets\locale\en.json" />
    <None Remove="ClientApp\src\assets\locale\pl.json" />
    <None Remove="favicon.ico" />
  </ItemGroup>

  <ItemGroup>
    <Content Include="ClientApp\src\assets\images\custom-views\snow-zones.jpg">
      <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
    </Content>
    <Content Include="ClientApp\src\assets\locale\de.json">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <ExcludeFromSingleFile>true</ExcludeFromSingleFile>
      <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
    </Content>
    <Content Include="ClientApp\src\assets\locale\en.json">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <ExcludeFromSingleFile>true</ExcludeFromSingleFile>
      <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
    </Content>
    <Content Include="ClientApp\src\assets\locale\pl.json">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <ExcludeFromSingleFile>true</ExcludeFromSingleFile>
      <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
    </Content>
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Build_IT_Application\Build_IT_Application.csproj" />
    <ProjectReference Include="..\Build_IT_CommonTools\Build_IT_CommonTools.csproj" />
    <ProjectReference Include="..\Build_IT_DataAccess\Build_IT_DataAccess.csproj" />
    <ProjectReference Include="..\Build_IT_Data\Build_IT_Data.csproj" />
  </ItemGroup>

  <ItemGroup>
    <Folder Include="ClientApp\src\app\common\validators\" />
    <Folder Include="ClientApp\src\app\modules\loads\components\wind-loads-components\" />
  </ItemGroup>

  <ItemGroup>
    <Resource Include="favicon.ico">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Resource>
  </ItemGroup>

  <ItemGroup>
    <TypeScriptCompile Include="ClientApp\src\app\common\errors\app-error-handler.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\common\errors\app-error-state-matcher.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\common\errors\app-error.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\common\errors\bad-input-error.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\common\errors\not-found-error.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\directives\element-select.directive.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\models\token.response.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\models\user.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\modules\pipes-module\text-pipes\safe-html-pipe.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\modules\script-interpreter\models\api\scripts\create-script-command.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\modules\script-interpreter\models\assertionImpl.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\modules\script-interpreter\models\enums\language.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\modules\script-interpreter\models\testDataImpl.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\modules\script-interpreter\models\testParameterImpl.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\modules\script-interpreter\services\test-data.service.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\modules\script-interpreter\services\translations\group-translation.service.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\modules\script-interpreter\services\translations\parameter-translation.service.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\modules\script-interpreter\services\translations\script-translation.service.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\modules\script-interpreter\services\translations\value-option-translation.service.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\services\auth.interceptor.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\services\auth.response.interceptor.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\services\auth.service.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\services\configuration.service.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\services\db-keys.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\services\local-store-manager.service.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\services\search.service.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\services\translation.service.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\services\utilities.ts" />
  </ItemGroup>

  <Target Name="DebugEnsureNodeEnv" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('$(SpaRoot)node_modules') ">
    <!-- Ensure Node.js is installed -->
    <Exec Command="node --version" ContinueOnError="true">
      <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
    </Exec>
    <Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
    <Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..." />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
  </Target>

  <Target Name="PublishRunWebpack" AfterTargets="ComputeFilesToPublish">
    <!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm run build -- --prod" />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm run build:ssr -- --prod" Condition=" '$(BuildServerSideRenderer)' == 'true' " />

    <!-- Include the newly-built files in the publish output -->
    <ItemGroup>
      <DistFiles Include="$(SpaRoot)dist\**; $(SpaRoot)dist-server\**" />
      <DistFiles Include="$(SpaRoot)node_modules\**" Condition="'$(BuildServerSideRenderer)' == 'true'" />
      <ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
        <RelativePath>%(DistFiles.Identity)</RelativePath>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
        <ExcludeFromSingleFile>true</ExcludeFromSingleFile>
      </ResolvedFileToPublish>
    </ItemGroup>
  </Target>

</Project>
